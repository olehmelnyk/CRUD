#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('CRUD:server');
const http = require('http');

/**
 * Get port and host from console
 */

const args = process.argv.slice(2);
switch(args.length){
  case 0:
    break;
  case 1:
    var argPort = +args[0];
  case 2:
    var argHost = args[1];
    break;
  default:
    console.error(`Too many params passed: ${args}, expected first parameter to be port and second parameter to be host`);
}

/**
 * Get host from console args, local env or use localhost as default
 */

const host = filterHosts([argHost, process.env.HOST, 'localhost']);

function filterHosts(hosts){
  for(let i = 0; i < hosts.length; i++){
    if(hosts[i]) return hosts[i];
  }
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(argPort || process.env.PORT || 3000);
app.set('port');

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  //const addr = server.address();
  //let bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug(`Listening on ${host}:${port}`);
}