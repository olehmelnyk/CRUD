#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const config = require('../config');
const app = require('../app');
const debug = require('debug')('CRUD:server');
const http = require('http');

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

app.set('port');
server.listen(config.port, config.host);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error){
  if(error.syscall !== 'listen'){
    throw error;
  }

  let bind = typeof port === 'string'
    ? `Pipe ${config.port}`
    : `Port ${config.port}`;

  // handle specific listen errors with friendly messages
  switch(error.code){
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

// to make this work you need to set your local env: DEBUG=CRUD:*
// or just change debug to console.log
function onListening(){
  //const addr = server.address();
  //let bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  if(process.env.DEBUG){
    debug(`Listening on ${config.host}:${config.port}`);
  }else{
    console.log(`Listening on ${config.host}:${config.port}`);
  }
}